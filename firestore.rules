
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function userHasRole(role) {
      let userDoc = getUserDoc();
      return isSignedIn() && userDoc.exists && userDoc.data != null && userDoc.data.role == role;
    }

    function isCustomer() {
      return userHasRole('customer');
    }

    function isAgency() {
      return userHasRole('agency');
    }

    function isAdmin() {
      return userHasRole('admin');
    }

    // Users Collection (/users/{userId})
    match /users/{userId} {
      // Create: Any authenticated user can create their own profile document during registration.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Read:
      // - Users can read their own profile.
      // - Admins can read any user's profile.
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());

      // Update:
      // - Users can update their own profile (e.g., displayName, but not role directly).
      // - Admins can update any user's profile (e.g., to change a role).
      allow update: if isSignedIn() && 
                      ( (request.auth.uid == userId && !('role' in request.resource.data)) || isAdmin() );
                      // Prevents self-role change unless admin

      // Delete: Generally false for users. Admins could delete.
      allow delete: if isAdmin();
    }
    // Allow admins to list all users
    match /users {
      allow list: if isAdmin();
    }


    // Bookings Collection (/bookings/{bookingId})
    match /bookings/{bookingId} {
      // Create:
      // - Customers can create their own bookings.
      // - Agencies can create bookings (e.g., on behalf of customers).
      // - Admins can create bookings.
      allow create: if (isCustomer() && request.resource.data.customerId == request.auth.uid) ||
                       isAgency() ||
                       isAdmin();
      // Read:
      // - Customers can read their own bookings.
      // - Agencies can read all bookings.
      // - Admins can read all bookings.
      allow read: if (isCustomer() && resource.data.customerId == request.auth.uid) ||
                     isAgency() ||
                     isAdmin();
      // Update:
      // - Agencies can update any booking (e.g., status, assign vehicle/driver).
      // - Admins can update any booking.
      allow update: if isAgency() || isAdmin();


      // Delete:
      // - Agencies can delete bookings.
      // - Admins can delete bookings.
      // - Customers cannot delete.
      allow delete: if isAgency() || isAdmin();
    }

    // Employees Collection (/employees/{employeeId}) - Primarily Agency data
    match /employees/{employeeId} {
      // Create, Read, Update, Delete:
      // - Agencies can manage all employees.
      // - Admins can manage all employees.
      // - Customers have no access.
      allow read, write: if isAgency() || isAdmin();
    }
     match /employees { // Allow listing for agency/admin
      allow list: if isAgency() || isAdmin();
    }


    // Vehicles Collection (/vehicles/{vehicleId}) - Primarily Agency data
    match /vehicles/{vehicleId} {
      // Create, Read, Update, Delete:
      // - Agencies can manage all vehicles.
      // - Admins can manage all vehicles.
      // - Customers have no access.
      allow read, write: if isAgency() || isAdmin();
    }
    match /vehicles { // Allow listing for agency/admin
      allow list: if isAgency() || isAdmin();
    }

    // Notifications Collection (/notifications/{notificationId})
    match /notifications/{notificationId} {
      // Create:
      // - Admins can create any notification.
      // - System/Service can create notifications (booking service creating for customer)
      allow create: if isAdmin() || request.resource.data.createdBySystem == true;


      // Read:
      // - Customers can read notifications targeted to their userId and role 'customer'.
      // - Agencies can read notifications targeted to role 'agency'.
      // - Admins can read all notifications.
      allow read: if (isCustomer() && resource.data.userId == request.auth.uid && resource.data.role == 'customer') ||
                     (isAgency() && resource.data.role == 'agency') || 
                     isAdmin();

      // Update: (Primarily for marking as read)
      // - Customers can update their own notifications.
      // - Agencies can update agency-wide notifications.
      // - Admins can update any notification.
      allow update: if ((isCustomer() && resource.data.userId == request.auth.uid && resource.data.role == 'customer') ||
                        (isAgency() && resource.data.role == 'agency') || 
                        isAdmin()) &&
                       request.resource.data.keys().hasOnly(['read']); 

      // Delete:
      // - Admins can delete notifications.
      allow delete: if isAdmin();
    }
     match /notifications { // Allow listing for admin and specific queries for customer/agency
      allow list: if isAdmin() || 
                    (isCustomer() && request.query.resource.data.userId == request.auth.uid && request.query.resource.data.role == 'customer') ||
                    (isAgency() && request.query.resource.data.role == 'agency');
    }


    // Reviews Collection (/reviews/{reviewId})
    match /reviews/{reviewId} {
      // Create:
      // - Customers can create 'user_submitted' reviews for themselves.
      // - Agencies can create 'customer_feedback' reviews.
      // - Admins (potentially, for seeding or moderation).
      allow create: if (isCustomer() && request.resource.data.reviewerId == request.auth.uid && request.resource.data.reviewType == 'user_submitted') ||
                       (isAgency() && request.resource.data.reviewType == 'customer_feedback') ||
                       isAdmin();

      // Read:
      // - Customers can read their own 'user_submitted' reviews.
      // - Agencies can read 'customer_feedback' reviews and 'user_submitted' reviews (to see what customers said about their service).
      // - Admins can read all reviews.
      allow read: if (isCustomer() && resource.data.reviewerId == request.auth.uid && resource.data.reviewType == 'user_submitted') ||
                     (isAgency() && (resource.data.reviewType == 'customer_feedback' || resource.data.reviewType == 'user_submitted')) ||
                     isAdmin();

      // Update:
      // - Agencies can update 'customer_feedback' reviews they logged.
      // - Admins can update any review (moderation).
      allow update: if (isAgency() && resource.data.reviewType == 'customer_feedback') || 
                       isAdmin();

      // Delete:
      // - Agencies can delete 'customer_feedback' reviews they logged.
      // - Admins can delete any review.
      allow delete: if (isAgency() && resource.data.reviewType == 'customer_feedback') || 
                       isAdmin();
    }
     match /reviews { // Allow listing for admin, and specific queries for customer/agency
      allow list: if isAdmin() ||
                    (isCustomer() && request.query.resource.data.reviewerId == request.auth.uid && request.query.resource.data.reviewType == 'user_submitted') ||
                    (isAgency() && (request.query.resource.data.reviewType == 'customer_feedback' || request.query.resource.data.reviewType == 'user_submitted'));
    }
    
    // Default deny for any path not explicitly matched
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
