
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function userHasRole(role) {
      let userDoc = getUserDoc();
      return isSignedIn() && userDoc.exists && userDoc.data != null && userDoc.data.role == role;
    }
    
    function isCustomer() {
      return userHasRole('customer');
    }

    function isAgency() {
      return userHasRole('agency');
    }

    function isAdmin() {
      return userHasRole('admin');
    }

    // Users Collection (/users/{userId})
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow update: if isSignedIn() && 
                      ( (request.auth.uid == userId && !('role' in request.resource.data)) || isAdmin() );
      allow delete: if isAdmin();
    }
    // Allow admins to list all users
    match /users {
      allow list: if isAdmin();
    }


    // Bookings Collection (/bookings/{bookingId})
    match /bookings/{bookingId} {
      allow create: if (isCustomer() && request.resource.data.customerId == request.auth.uid) ||
                       isAgency() || // Agencies can also create bookings
                       isAdmin();
      allow read: if (isCustomer() && resource.data.customerId == request.auth.uid) ||
                     isAgency() ||
                     isAdmin();
      allow update: if isAgency() || isAdmin(); // Agencies and Admins can update bookings
      allow delete: if isAgency() || isAdmin();
    }
     match /bookings {
      allow list: if isAgency() || isAdmin(); // Agencies and Admins can list bookings
    }

    // Employees Collection (/employees/{employeeId})
    match /employees/{employeeId} {
      allow create: if (isAgency() && request.resource.data.agencyId == request.auth.uid) || isAdmin();
      allow read: if (isAgency() && resource.data.agencyId == request.auth.uid) || isAdmin();
      allow update: if (isAgency() && resource.data.agencyId == request.auth.uid && !('agencyId' in request.resource.data)) || isAdmin(); // Agency cannot change agencyId
      allow delete: if (isAgency() && resource.data.agencyId == request.auth.uid) || isAdmin();
    }
    match /employees {
      allow list: if isAgency() || isAdmin(); // Agencies list their own, Admins list all (client query filters for agency)
    }


    // Vehicles Collection (/vehicles/{vehicleId})
    match /vehicles/{vehicleId} {
      allow create: if (isAgency() && request.resource.data.agencyId == request.auth.uid) || isAdmin();
      allow read: if (isAgency() && resource.data.agencyId == request.auth.uid) || isAdmin();
      allow update: if (isAgency() && resource.data.agencyId == request.auth.uid && !('agencyId' in request.resource.data)) || isAdmin(); // Agency cannot change agencyId
      allow delete: if (isAgency() && resource.data.agencyId == request.auth.uid) || isAdmin();
    }
     match /vehicles {
      allow list: if isAgency() || isAdmin(); // Agencies list their own, Admins list all (client query filters for agency)
    }


    // Notifications Collection (/notifications/{notificationId})
    match /notifications/{notificationId} {
      allow create: if isAdmin() || (isAgency() && request.resource.data.role == 'customer'); // Agency creating notifications for its customers
      allow read: if (isCustomer() && resource.data.userId == request.auth.uid && resource.data.role == 'customer') ||
                     (isAgency() && resource.data.role == 'agency' && resource.data.userId == request.auth.uid) || // Agency viewing their own notifications
                     (isAgency() && resource.data.role == 'agency' && resource.data.userId == null) || // Agency viewing general agency notifications
                     isAdmin();
      allow update: if ((isCustomer() && resource.data.userId == request.auth.uid && resource.data.role == 'customer') ||
                        (isAgency() && resource.data.role == 'agency' && resource.data.userId == request.auth.uid) ||
                        (isAgency() && resource.data.role == 'agency' && resource.data.userId == null) ||
                        isAdmin()) &&
                       request.resource.data.keys().hasOnly(['read']); 
      allow delete: if isAdmin();
    }
     match /notifications {
      allow list: if isCustomer() || isAgency() || isAdmin(); // Client query filters appropriately
    }


    // Reviews Collection (/reviews/{reviewId})
    match /reviews/{reviewId} {
      allow create: if (isCustomer() && request.resource.data.reviewerId == request.auth.uid && request.resource.data.reviewType == 'user_submitted') ||
                       (isAgency() && request.resource.data.reviewType == 'customer_feedback' && request.resource.data.agencyId == request.auth.uid ) ||
                       isAdmin(); 
      allow read: if (isCustomer() && resource.data.reviewerId == request.auth.uid && resource.data.reviewType == 'user_submitted') ||
                     (isAgency() && (resource.data.reviewType == 'customer_feedback' || resource.data.reviewType == 'user_submitted')) ||
                     isAdmin();
      allow update: if (isAgency() && resource.data.reviewType == 'customer_feedback' && resource.data.agencyId == request.auth.uid && !('agencyId' in request.resource.data) && !('reviewerId' in request.resource.data) && !('reviewType' in request.resource.data) ) || 
                       isAdmin();
      allow delete: if (isAgency() && resource.data.reviewType == 'customer_feedback' && resource.data.agencyId == request.auth.uid) || 
                       isAdmin();
    }
    match /reviews {
      allow list: if isCustomer() || isAgency() || isAdmin(); // Client query filters appropriately
    }
    
    // Default deny for any path not explicitly matched
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
